-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Loltalk.

module Loltalk.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Loltalk.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Loltalk.Abs.MIdent where
  prt _ (Loltalk.Abs.MIdent i) = doc $ showString i
instance Print Loltalk.Abs.Numb where
  prt _ (Loltalk.Abs.Numb i) = doc $ showString i
instance Print Loltalk.Abs.EInc where
  prt _ (Loltalk.Abs.EInc i) = doc $ showString i
instance Print Loltalk.Abs.EDec where
  prt _ (Loltalk.Abs.EDec i) = doc $ showString i
instance Print (Loltalk.Abs.Type' a) where
  prt i = \case
    Loltalk.Abs.Int _ -> prPrec i 0 (concatD [doc (showString "int")])
    Loltalk.Abs.Str _ -> prPrec i 0 (concatD [doc (showString "str")])
    Loltalk.Abs.Bool _ -> prPrec i 0 (concatD [doc (showString "bool")])
    Loltalk.Abs.Void _ -> prPrec i 0 (concatD [doc (showString "meh")])

instance Print (Loltalk.Abs.Program' a) where
  prt i = \case
    Loltalk.Abs.Program _ topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print (Loltalk.Abs.TopDef' a) where
  prt i = \case
    Loltalk.Abs.FnDef _ type_ mident args stmts -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident, doc (showString ":="), doc (showString "["), prt 0 args, doc (showString "$"), prt 0 stmts, doc (showString "]")])
    Loltalk.Abs.FnDefRet _ type_ mident args stmts -> prPrec i 0 (concatD [doc (showString "@"), prt 0 type_, prt 0 mident, doc (showString ":="), doc (showString "["), prt 0 args, doc (showString "$"), prt 0 stmts, doc (showString "]")])
    Loltalk.Abs.DeclGlob _ type_ item -> prPrec i 0 (concatD [doc (showString "|"), prt 0 type_, prt 0 item, doc (showString "|")])
    Loltalk.Abs.DeclFInv _ type_ item invars -> prPrec i 0 (concatD [doc (showString "|"), prt 0 type_, prt 0 item, doc (showString ":"), prt 0 invars, doc (showString "|")])

instance Print [Loltalk.Abs.TopDef' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Loltalk.Abs.Arg' a) where
  prt i = \case
    Loltalk.Abs.Arg _ type_ mident -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident])
    Loltalk.Abs.ArgRef _ type_ mident -> prPrec i 0 (concatD [doc (showString "&"), prt 0 type_, prt 0 mident])
    Loltalk.Abs.ArgFunc _ type_ mident -> prPrec i 0 (concatD [prt 0 type_, doc (showString "@"), prt 0 mident])
    Loltalk.Abs.ArgFuncF _ type_ mident -> prPrec i 0 (concatD [doc (showString "@"), prt 0 type_, doc (showString "@"), prt 0 mident])

instance Print [Loltalk.Abs.Arg' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print (Loltalk.Abs.Stmt' a) where
  prt i = \case
    Loltalk.Abs.FnStmt _ type_ mident args stmts -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident, doc (showString ":="), doc (showString "["), prt 0 args, doc (showString "$"), prt 0 stmts, doc (showString "]")])
    Loltalk.Abs.FnRetStmt _ type_ mident args stmts -> prPrec i 0 (concatD [doc (showString "@"), prt 0 type_, prt 0 mident, doc (showString ":="), doc (showString "["), prt 0 args, doc (showString "$"), prt 0 stmts, doc (showString "]")])
    Loltalk.Abs.Decl _ type_ item -> prPrec i 0 (concatD [doc (showString "|"), prt 0 type_, prt 0 item, doc (showString "|")])
    Loltalk.Abs.DeclInv _ type_ item invars -> prPrec i 0 (concatD [doc (showString "|"), prt 0 type_, prt 0 item, doc (showString ":"), prt 0 invars, doc (showString "|")])
    Loltalk.Abs.DeclFunc _ type_ mident -> prPrec i 0 (concatD [doc (showString "|"), prt 0 type_, doc (showString "@"), prt 0 mident, doc (showString "|")])
    Loltalk.Abs.DeclFunF _ type_ mident -> prPrec i 0 (concatD [doc (showString "|"), doc (showString "@"), prt 0 type_, doc (showString "@"), prt 0 mident, doc (showString "|")])
    Loltalk.Abs.Empty _ -> prPrec i 0 (concatD [doc (showString ";")])
    Loltalk.Abs.DecLVal _ type_ mident exprs -> prPrec i 0 (concatD [doc (showString "|"), doc (showString "#"), prt 0 type_, prt 0 mident, doc (showString "#("), prt 0 exprs, doc (showString ")"), doc (showString "|")])
    Loltalk.Abs.DecLSize _ type_ mident numb -> prPrec i 0 (concatD [doc (showString "|"), doc (showString "#"), prt 0 type_, prt 0 mident, doc (showString "#"), prt 0 numb, doc (showString "|")])
    Loltalk.Abs.DecLVSize _ type_ mident numb expr -> prPrec i 0 (concatD [doc (showString "|"), doc (showString "#"), prt 0 type_, prt 0 mident, doc (showString "#"), prt 0 numb, doc (showString "##"), prt 0 expr, doc (showString "|")])
    Loltalk.Abs.FreeStmt _ stmts -> prPrec i 0 (concatD [doc (showString "<"), prt 0 stmts, doc (showString ">")])
    Loltalk.Abs.Ass _ mident expr -> prPrec i 0 (concatD [prt 0 mident, doc (showString ":="), prt 0 expr, doc (showString ";")])
    Loltalk.Abs.Incr _ mident einc -> prPrec i 0 (concatD [prt 0 mident, prt 0 einc, doc (showString ";")])
    Loltalk.Abs.Decr _ mident edec -> prPrec i 0 (concatD [prt 0 mident, prt 0 edec, doc (showString ";")])
    Loltalk.Abs.Ret _ expr -> prPrec i 0 (concatD [doc (showString "yeet"), prt 0 expr, doc (showString ";")])
    Loltalk.Abs.VRet _ -> prPrec i 0 (concatD [doc (showString "yeet"), doc (showString ";")])
    Loltalk.Abs.Cond _ expr stmts -> prPrec i 0 (concatD [doc (showString "mom"), doc (showString "can"), doc (showString "we"), doc (showString "have"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "at"), doc (showString "home"), doc (showString "{"), prt 0 stmts, doc (showString "}")])
    Loltalk.Abs.CondElse _ expr stmts1 stmts2 -> prPrec i 0 (concatD [doc (showString "mom"), doc (showString "can"), doc (showString "we"), doc (showString "have"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "at"), doc (showString "home"), doc (showString "{"), prt 0 stmts1, doc (showString "}"), doc (showString "we"), doc (showString "already"), doc (showString "have"), doc (showString "it"), doc (showString "at"), doc (showString "home"), doc (showString "{"), prt 0 stmts2, doc (showString "}")])
    Loltalk.Abs.CondElIf _ expr1 stmts1 expr2 stmts2 -> prPrec i 0 (concatD [doc (showString "mom"), doc (showString "can"), doc (showString "we"), doc (showString "have"), doc (showString "("), prt 0 expr1, doc (showString ")"), doc (showString "at"), doc (showString "home"), doc (showString "{"), prt 0 stmts1, doc (showString "}"), doc (showString "or"), doc (showString "maybe"), doc (showString "("), prt 0 expr2, doc (showString ")"), doc (showString "{"), prt 0 stmts2, doc (showString "}")])
    Loltalk.Abs.CondElEs _ expr1 stmts1 expr2 stmts2 stmts3 -> prPrec i 0 (concatD [doc (showString "mom"), doc (showString "can"), doc (showString "we"), doc (showString "have"), doc (showString "("), prt 0 expr1, doc (showString ")"), doc (showString "at"), doc (showString "home"), doc (showString "{"), prt 0 stmts1, doc (showString "}"), doc (showString "or"), doc (showString "maybe"), doc (showString "("), prt 0 expr2, doc (showString ")"), doc (showString "{"), prt 0 stmts2, doc (showString "}"), doc (showString "we"), doc (showString "already"), doc (showString "have"), doc (showString "it"), doc (showString "at"), doc (showString "home"), doc (showString "{"), prt 0 stmts3, doc (showString "}")])
    Loltalk.Abs.While _ expr stmts -> prPrec i 0 (concatD [doc (showString "never"), doc (showString "gonna"), doc (showString "give"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "up"), doc (showString "{"), prt 0 stmts, doc (showString "}")])
    Loltalk.Abs.EBreak _ -> prPrec i 0 (concatD [doc (showString "enough"), doc (showString ";")])
    Loltalk.Abs.EContinue _ -> prPrec i 0 (concatD [doc (showString "yes"), doc (showString "please"), doc (showString ";")])
    Loltalk.Abs.SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])

instance Print (Loltalk.Abs.Invar' a) where
  prt i = \case
    Loltalk.Abs.Cannot _ expr -> prPrec i 0 (concatD [doc (showString "!("), prt 0 expr, doc (showString ")")])
    Loltalk.Abs.Must _ expr -> prPrec i 0 (concatD [doc (showString "?("), prt 0 expr, doc (showString ")")])

instance Print [Loltalk.Abs.Invar' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print (Loltalk.Abs.Item' a) where
  prt i = \case
    Loltalk.Abs.NoInit _ mident -> prPrec i 0 (concatD [prt 0 mident])
    Loltalk.Abs.Init _ mident expr -> prPrec i 0 (concatD [prt 0 mident, prt 0 expr])

instance Print [Loltalk.Abs.Stmt' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Loltalk.Abs.Expr' a) where
  prt i = \case
    Loltalk.Abs.EVar _ mident -> prPrec i 6 (concatD [prt 0 mident])
    Loltalk.Abs.ELitInt _ numb -> prPrec i 6 (concatD [prt 0 numb])
    Loltalk.Abs.ELitTrue _ -> prPrec i 6 (concatD [doc (showString "^^")])
    Loltalk.Abs.ELitFalse _ -> prPrec i 6 (concatD [doc (showString "v.v")])
    Loltalk.Abs.EApp _ mident exprs -> prPrec i 6 (concatD [prt 0 mident, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Loltalk.Abs.EIdx _ mident expr -> prPrec i 6 (concatD [prt 0 mident, doc (showString "["), prt 0 expr, doc (showString "]")])
    Loltalk.Abs.EString _ str -> prPrec i 6 (concatD [printString str])
    Loltalk.Abs.EAnon _ args stmts -> prPrec i 6 (concatD [doc (showString "["), prt 0 args, doc (showString "$"), prt 0 stmts, doc (showString "]")])
    Loltalk.Abs.Neg _ expr -> prPrec i 5 (concatD [doc (showString "negga"), prt 6 expr])
    Loltalk.Abs.Not _ expr -> prPrec i 5 (concatD [doc (showString "sorry"), prt 6 expr])
    Loltalk.Abs.EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    Loltalk.Abs.EAdd _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    Loltalk.Abs.ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    Loltalk.Abs.EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString ":+"), prt 1 expr2])
    Loltalk.Abs.EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString ":o"), prt 0 expr2])

instance Print [Loltalk.Abs.Expr' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Loltalk.Abs.AddOp' a) where
  prt i = \case
    Loltalk.Abs.Plus _ -> prPrec i 0 (concatD [doc (showString "+.+")])
    Loltalk.Abs.Minus _ -> prPrec i 0 (concatD [doc (showString "-.-")])

instance Print (Loltalk.Abs.MulOp' a) where
  prt i = \case
    Loltalk.Abs.Times _ -> prPrec i 0 (concatD [doc (showString "*.*")])
    Loltalk.Abs.Div _ -> prPrec i 0 (concatD [doc (showString ":/")])

instance Print (Loltalk.Abs.RelOp' a) where
  prt i = \case
    Loltalk.Abs.LTH _ -> prPrec i 0 (concatD [doc (showString "d:")])
    Loltalk.Abs.LE _ -> prPrec i 0 (concatD [doc (showString "d=")])
    Loltalk.Abs.GTH _ -> prPrec i 0 (concatD [doc (showString ":p")])
    Loltalk.Abs.GE _ -> prPrec i 0 (concatD [doc (showString "=p")])
    Loltalk.Abs.EQU _ -> prPrec i 0 (concatD [doc (showString "rel")])
    Loltalk.Abs.NE _ -> prPrec i 0 (concatD [doc (showString "not"), doc (showString "rel")])
